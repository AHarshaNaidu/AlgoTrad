import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# Generate sample data (you can replace this with your own dataset)
def generate_data():
    # Generate sample data (you can replace this with your own dataset)
    np.random.seed(42)
    data = np.random.randn(1000, 1)
    return data

# Preprocess data
def preprocess_data(data):
    # Normalize data
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)
    return scaled_data

# Split data into input and output sequences
def create_sequences(data, n_steps):
    X, y = [], []
    for i in range(len(data)):
        end_ix = i + n_steps
        if end_ix > len(data)-1:
            break
        seq_x, seq_y = data[i:end_ix], data[end_ix]
        X.append(seq_x)
        y.append(seq_y)
    return np.array(X), np.array(y)

# Define LSTM model
def build_model(n_steps, n_features):
    model = Sequential()
    model.add(LSTM(units=50, activation='relu', input_shape=(n_steps, n_features)))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mse')
    return model

# Generate sample data
data = generate_data()

# Preprocess data
scaled_data = preprocess_data(data)

# Define number of time steps
n_steps = 3

# Create input and output sequences
X, y = create_sequences(scaled_data, n_steps)

# Reshape input sequences for LSTM
n_features = 1
X = X.reshape((X.shape[0], X.shape[1], n_features))

# Build LSTM model
model = build_model(n_steps, n_features)

# Fit model
model.fit(X, y, epochs=200, verbose=0)

# Save model
model.save('Stock_Predictions_Model.h5')
